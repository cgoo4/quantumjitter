{
  "hash": "1c2bbe6b4bdd0bafcee1e98bbc04373d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Plots Thicken\ndate: 2018-02-07\ncategories: [R, apps, web scraping]\ndescription: \"Every story needs a good plot. Which plot types generate the most interest on Wikipedia?\"\nbibliography: references.bib\n---\n\n\n![](feature.gif){fig-alt=\"The keys of a typewriter with \\\"R\\\" highlighted and the word \\\"plot\\\" being typed\"}\n\nOne could think of data science as \"art grounded in facts\". It tells a story through visualisation. Both story and visualisation rely on a good plot. And an abundance of those has evolved over time. Many have their own dedicated Wikipedia page {{< iconify iconoir emoji-surprise-alt >}}.\n\nWhich generate the most interest? How is the interest trending over time? Let's build an interactive app to find out.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(conflicted)\nlibrary(tidyverse)\nconflict_prefer_all(\"dplyr\")\nlibrary(shiny)\nlibrary(gridlayout)\nlibrary(rvest)\nlibrary(scales)\nlibrary(pageviews)\nlibrary(bslib)\nlibrary(paletteer)\nlibrary(ggfoundry)\nlibrary(usedthese)\n\nconflict_scout()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(theme_bw())\n\nn <- 6\npal_name <- \"wesanderson::IsleofDogs1\"\n\npal <- paletteer_d(pal_name, n = n)\n\ndisplay_palette(fill = pal, n = n, pal_name = pal_name)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/theme-1.png){width=100%}\n:::\n:::\n\n\nI'm going to start by harvesting some data from Wikipedia's [Statistical charts and diagrams category](https://en.wikipedia.org/wiki/Category:Statistical_charts_and_diagrams). I can use this to build a list of all chart types which have a dedicated Wikipedia article page. Using rvest [@rvest] inside the app ensures it will respond to any newly-created articles.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncharts <-\n  tibble(\n    chart = read_html(str_c(\n      \"https://en.wikipedia.org/wiki/\",\n      \"Category:Statistical_charts_and_diagrams\"\n    )) |>\n      html_elements(\".mw-category-group a\") |>\n      html_text()\n  )\n```\n:::\n\n\nThe pageviews [@pageviews] package provides an API into Wikipedia. I'll create a function wrapped around `article_pageviews` so I can later iterate through a subset of the list established in the prior code chunk.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npv <- \\(article) {\n  article_pageviews(\n    project = \"en.wikipedia\",\n    article,\n    user_type = \"user\",\n    start = \"2015070100\",\n    end = today()\n  )\n}\n```\n:::\n\n\nI want an input selector so that a user can choose plot types for comparison. I also want to provide user control of the y-axis scale. A combination of *fixed* and *log10* is better for comparing plots. *Free* scaling reveals more detail in the individual trends.\n\nAlthough [shinyuieditor](https://rstudio.github.io/shinyuieditor/) [@shinyuieditor] is currently in Alpha at the time of this update, using `launch_editor(\"/content/project/thicken/\")` helped me modify the basic grid layout of the UI for this pre-existing `app.R`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- grid_page(\n  theme = bs_theme(version = 5, bootswatch = \"simplex\"),\n  layout = c(\n    \"header  header\",\n    \"sidebar line \"\n  ),\n  row_sizes = c(\n    \"100px\",\n    \"1fr\"\n  ),\n  col_sizes = c(\n    \"250px\",\n    \"1fr\"\n  ),\n  gap_size = \"1rem\",\n  grid_card(\n    area = \"sidebar\",\n    item_alignment = \"top\",\n    title = \"Options\",\n    item_gap = \"13px\",\n    dateRangeInput(\"dates\",\n      label = \"Date range\",\n      start = \"2015-07-01\",\n      end = NULL\n    ),\n    selectizeInput(\n      inputId = \"article\",\n      label = \"Chart type\",\n      choices = charts,\n      selected = c(\n        \"Violin plot\",\n        \"Dendrogram\",\n        \"Histogram\",\n        \"Pie chart\"\n      ),\n      options = list(maxItems = 6),\n      multiple = TRUE\n    ),\n    selectInput(\n      inputId = \"scales\",\n      label = \"Fixed or free y-axis\",\n      choices = c(\"Fixed\" = \"fixed\", \"Free\" = \"free\"),\n      selected = \"fixed\"\n    ),\n    selectInput(\n      inputId = \"log10\",\n      label = \"Log 10 or normal y-axis\",\n      choices = c(\"Log 10\" = \"log10\", \"Normal\" = \"norm\"),\n      selected = \"log10\"\n    )\n  ),\n  grid_card_text(\n    area = \"header\",\n    content = \"   Plot Plotter   \",\n    alignment = \"center\",\n    is_title = FALSE,\n    icon = \"logo1.png\",\n    img_height = 30\n  ),\n  grid_card_plot(area = \"line\")\n)\n```\n:::\n\n\nThe server component outputs a faceted ggplot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nserver <- \\(input, output, session) {\n  subsetr <- reactive({\n    req(input$article)\n    pageviews <- map(input$article, pv) |>\n      mutate(\n        date = ymd(date),\n        article = str_replace_all(article, \"_\", \" \")\n      ) |>\n      filter(date >= input$dates[1], date <= input$dates[2])\n  }) |> \n    list_rbind()\n\n  output$line <- renderPlot({\n    p <- ggplot(\n      subsetr(),\n      aes(date,\n        views,\n        colour = article\n      )\n    ) +\n      geom_line() +\n      scale_colour_manual(values = pal) +\n      geom_smooth(colour = \"lightgrey\") +\n      facet_wrap(~article, nrow = 1, scales = input$scales) +\n      theme(\n        legend.position = \"none\",\n        axis.text.x = element_text(angle = 45, hjust = 1),\n        plot.margin = margin(1, 1, 1, 1, \"cm\")\n      ) +\n      labs(\n        x = NULL, y = NULL,\n        caption = \"\\nSource: Daily Wikipedia Article Page Views\"\n      )\n\n    switch(input$log10,\n      norm = p,\n      log10 = p + scale_y_log10(\n        labels = label_number(scale_cut = cut_short_scale())\n      )\n    )\n  })\n}\n\nshinyApp(ui, server)\n```\n:::\n\n\nAnd here's the live shiny [@shiny] app deployed via [shinyapps.io](https://www.shinyapps.io).\n\n\n```{=html}\n<iframe src=\"https://quantumjitter.shinyapps.io/thicken/\" width=\"100%\" height=\"700\" scrolling=\"no\" frameBorder=\"0\"></iframe>\n```\n\nNote the utility of selecting the right scaling. The combination of \"fixed\" and \"normal\" reveals what must have been \"world histogram day\" on July 27th 2015, but little else.\n\nTurning non-interactive code into an app sharpens the mind's focus on performance. And profvis [@profvis], integrated into RStudio via the profile menu option, is a wonderful \"tool for helping you understand how R spends its time\".\n\nMy first version of the app was finger-tappingly slow.\n\nProfvis revealed the main culprit to be the pre-loading of a dataframe with the page-view data for all chart types (there are more than 100). Profiling prompted the more efficient \"reactive\" approach of loading the data only for the user's selection (maximum of 8).\n\nProfiling also showed that rounding the corners of the plot.background with additional grid-package code was expensive. App efficiency felt more important than minor cosmetic detailing (to the main panel to match the theme's side panel). And most users would probably barely notice (had I not drawn attention to it here).\n\n## R Toolbox\n\nSummarising below the packages and functions used in this post enables me to separately create a [toolbox visualisation](/project/box) summarising the usage of packages and functions across all posts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nused_here()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"usedthese table table-striped\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Package </th>\n   <th style=\"text-align:left;\"> Function </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> base </td>\n   <td style=\"text-align:left;\"> c[6], library[11], list[1], switch[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> bslib </td>\n   <td style=\"text-align:left;\"> bs_theme[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> conflicted </td>\n   <td style=\"text-align:left;\"> conflict_prefer_all[1], conflict_scout[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> dplyr </td>\n   <td style=\"text-align:left;\"> filter[1], mutate[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ggfoundry </td>\n   <td style=\"text-align:left;\"> display_palette[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ggplot2 </td>\n   <td style=\"text-align:left;\"> aes[1], element_text[1], facet_wrap[1], geom_line[1], geom_smooth[1], ggplot[1], labs[1], margin[1], scale_colour_manual[1], scale_y_log10[1], theme[1], theme_bw[1], theme_set[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> gridlayout </td>\n   <td style=\"text-align:left;\"> grid_card[1], grid_card_plot[1], grid_card_text[1], grid_page[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> lubridate </td>\n   <td style=\"text-align:left;\"> today[1], ymd[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> pageviews </td>\n   <td style=\"text-align:left;\"> article_pageviews[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> paletteer </td>\n   <td style=\"text-align:left;\"> paletteer_d[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> purrr </td>\n   <td style=\"text-align:left;\"> list_rbind[1], map[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> rvest </td>\n   <td style=\"text-align:left;\"> html_elements[1], html_text[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> scales </td>\n   <td style=\"text-align:left;\"> cut_short_scale[1], label_number[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> shiny </td>\n   <td style=\"text-align:left;\"> dateRangeInput[1], reactive[1], renderPlot[1], req[1], selectInput[2], selectizeInput[1], shinyApp[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> stringr </td>\n   <td style=\"text-align:left;\"> str_c[1], str_replace_all[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> tibble </td>\n   <td style=\"text-align:left;\"> tibble[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> usedthese </td>\n   <td style=\"text-align:left;\"> used_here[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> xml2 </td>\n   <td style=\"text-align:left;\"> read_html[1] </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}