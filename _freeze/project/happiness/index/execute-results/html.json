{
  "hash": "a2ed7b6121d862a2695ccc96b1f1bc66",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Finding Happiness in The Smoke\"\ndate: \"2022-03-19\"\ncategories: [R, dimension reduction, clustering, geospatial, machine learning]\ndescription: \"Cluster analysis and the characteristics that bind London boroughs\"\nbibliography: references.bib\n---\n\n\n![](feature.gif){fig-alt=\"A silhouette of the Houses of Parliament in bright yellow below a blue sky. Smoke wafts into the sky from several points and the peace symbol takes the place of Big Ben's clock.\"}\n\n[The Smoke](https://www.theguardian.com/environment/2002/nov/30/uknews.pollution), to use London's nickname, has 32 boroughs plus the central business district known as the [City of London](https://en.wikipedia.org/wiki/City_of_London). What does Cluster Analysis tell us about the characteristics that bind them?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(conflicted)\nlibrary(tidyverse)\nconflict_prefer_all(\"dplyr\", quiet = TRUE)\nlibrary(tidymodels)\nlibrary(tidytext)\nlibrary(tidyclust)\nlibrary(glue)\nlibrary(readxl)\nlibrary(janitor)\nlibrary(ggrepel)\nlibrary(sf)\nlibrary(scales)\nlibrary(ggfoundry)\nlibrary(usedthese)\n\nconflict_scout()\n```\n:::\n\n\nThe graphics will use a custom palette created in [Adobe Colour](https://color.adobe.com).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(theme_bw())\n\npal <- c(\"#0AC449\", \"#CF4E0A\", \"#0057B7\", \"#FFD700\", \"#870AC4\")\n\npal_name <- \"Custom Palette\"\n\ndisplay_palette(pal, pal_name)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/theme-1.png){width=100%}\n:::\n:::\n\n\n[The London Datastore](https://data.london.gov.uk) provides data profiling each area.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw_df <-\n  read_xlsx(\"london-borough-profiles.xlsx\", sheet = 2) |>\n  clean_names() |>\n  filter(str_starts(code, \"E\")) |>\n  mutate(across(where(is.character), \\(x) na_if(x, \".\")),\n    inner_outer_london = str_remove(inner_outer_london, \" London\")\n  )\n```\n:::\n\n\n## Dimensionality Reduction\n\nThese data include 81 numeric variables quantifying such things as population density, happiness and age. Way too many variables to visualise two-dimensionally. [Principal Components Analysis](https://en.wikipedia.org/wiki/Principal_component_analysis) can reduce the bulk of the information down to two variables. It is then possible to more easily visualise the relationships.\n\nThe City of London, aka \"The Square Mile\", is quite distinct from the other 32 areas and has many NA values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw_df |> \n  rowwise() |> \n  mutate(na_count = sum(is.na(cur_data()))) |> \n  select(area_name, na_count) |>\n  filter(na_count != 0) |>\n  arrange(desc(na_count))\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|area_name              | na_count|\n|:----------------------|--------:|\n|City of London         |       27|\n|Kensington and Chelsea |        3|\n|Barnet                 |        1|\n|Camden                 |        1|\n|Hackney                |        1|\n|Haringey               |        1|\n|Harrow                 |        1|\n|Islington              |        1|\n|Lewisham               |        1|\n|Merton                 |        1|\n|Richmond upon Thames   |        1|\n|Waltham Forest         |        1|\n|Wandsworth             |        1|\n\n</div>\n:::\n:::\n\n\nNot surprisingly, the two-dimensional visualisation sets the City of London apart. And the other 32 are broadly, albeit with some mixing, divided into inner and outer London boroughs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npca_fit <- raw_df |>\n  select(where(is.numeric)) |>\n  prcomp(scale = TRUE)\n\npca_augmented <-\n  pca_fit |>\n  augment(raw_df)\n\npca_augmented |>\n  ggplot(aes(.fittedPC1, .fittedPC2, fill = inner_outer_london)) +\n  geom_label(aes(label = area_name), size = 2, hjust = \"inward\") +\n  scale_fill_manual(values = pal) +\n  labs(\n    title = \"33 London Areas\", fill = \"London\",\n    x = \"Principal Component 1\", y = \"Principal Component 2\",\n    caption = \"Source: data.london.gov.uk\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/pca-1.png){width=100%}\n:::\n:::\n\n\nAfter squeezing the many dimensions into two, how much of the original information was it possible to retain?\n\n\n::: {.cell}\n\n```{.r .cell-code}\npca_tidied <- pca_fit |>\n  tidy(matrix = \"eigenvalues\")\n\npct_explained <-\n  pca_tidied |>\n  pluck(\"cumulative\", 2)\n\npca_tidied |>\n  ggplot(aes(percent, factor(PC))) +\n  geom_col(aes(fill = if_else(PC <= 2, TRUE, FALSE)),\n    alpha = 0.8, show.legend = FALSE,\n  ) +\n  scale_x_continuous(labels = label_percent(1)) +\n  scale_y_discrete(breaks = c(0, 5, 10, 15, 20)) +\n  scale_fill_manual(values = pal) +\n  labs(\n    title = glue(\n      \"{percent(pct_explained, 0.1)} of the \",\n      \"Variance Explained by Principal Components 1 & 2\"\n    ),\n    x = \"Principal Component\", y = NULL\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/pc1 & 2-1.png){width=100%}\n:::\n:::\n\n\nWhilst we do lose ease of interpretation by distilling the information in this way, it is still possible to understand which of the original variables influenced their two-dimensional positioning.\n\nThe axes depicted by the arrows below tell us that **anxiety scores** play a significant role in the placement of the City of London towards the upper-left. **Average age** pushes areas more towards the top. And **happiness** influences the bottom-right.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npattern <-\n  str_c(\"_\\\\d{4}|_st.+|_score|_rates|^percent(_of)?_|\",\n        \"^proportion_of_|^population(_of)?_|^number(_of)?_|\", \n        \"_\\\\d{2}_out_of_\\\\d{2}|_estimate|_percent\")\n\npca_fit |>\n  tidy(matrix = \"rotation\") |>\n  pivot_wider(names_from = \"PC\", names_prefix = \"PC\", \n              values_from = \"value\") |>\n  mutate(column = str_remove_all(column, pattern)) |>\n  ggplot(aes(PC1, PC2)) +\n  geom_segment(\n    xend = 0, yend = 0, colour = \"grey70\",\n    arrow = arrow(ends = \"first\", length = unit(8, \"pt\"))\n  ) +\n  geom_text_repel(aes(label = column), size = 3) +\n  theme_minimal() +\n  labs(\n    x = \"PC 1\", y = \"PC 2\",\n    title = \"Characteristics Influencing Area Positioning\",\n    caption = \"Source: data.london.gov.uk\"\n  ) +\n  theme(axis.text = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/interpretation-1.png){width=100%}\n:::\n:::\n\n\nThis may be validated by ranking all 33 areas by these three original variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npca_long <- \n  pca_augmented |>\n  select(area_name, matches(\"happ|anx|average_age\")) |>\n  rename_with(~ str_remove(., \"_.*\")) |>\n  rename(\"avg_age\" = \"average\") |>\n  pivot_longer(-area, values_to = \"score\") |>\n  mutate(area = reorder_within(area, score, name)) \n\npca_long |>\n  ggplot(aes(score, area, colour = name)) +\n  geom_point(show.legend = FALSE) +\n  facet_wrap(~name, scales = \"free\") +\n  scale_y_reordered() +\n  scale_colour_manual(values = pal) +\n  labs(x = NULL, caption = \"Source: data.london.gov.uk\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ranking-1.png){width=100%}\n:::\n:::\n\n\n## Cluster Modelling\n\nTo collect these areas into their natural groupings, a decision is needed on the desired number of clusters. We can visualise dividing the areas into 1, 2, 3 and so forth clusters. And, per below, 3 appears to nicely capture the natural grouping of the coloured points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2022)\n\nkclusts <-\n  tibble(k = 1:6) |>\n  mutate(\n    kclust = map(k, \\(k) kmeans(\n      pca_augmented |> select(.fittedPC1, .fittedPC2), k)),\n    tidied = map(kclust, tidy),\n    glanced = map(kclust, glance),\n    augmented = map(kclust, augment, pca_augmented)\n  )\n\nassignments <-\n  kclusts |>\n  unnest(pal = c(augmented))\n\nclusters <-\n  kclusts |>\n  unnest(cols = c(tidied))\n\nassignments |>\n  ggplot(aes(x = .fittedPC1, y = .fittedPC2)) +\n  geom_point(aes(color = .cluster)) +\n  facet_wrap(~k, nrow = 2) +\n  scale_colour_manual(values = pal[c(1:6)]) +\n  geom_point(data = clusters, size = 4, shape = 13) +\n  labs(\n    title = \"How Many Clusters Best Captures the Groupings?\",\n    subtitle = \"X Marks the Cluster Centre\",\n    caption = \"Source: data.london.gov.uk\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/kmeans-1.png){width=100%}\n:::\n:::\n\n\nThe [elbow method](https://en.wikipedia.org/wiki/Elbow_method_(clustering)) provides a more mathematical approach to the choice. The compactness of the clustering (as measured by the total within-cluster sum of squares) is significantly optimised when choosing 3 clusters, with diminishing returns thereafter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkclusts |>\n  unnest(cols = c(glanced)) |>\n  ggplot(aes(k, tot.withinss)) +\n  geom_line() +\n  geom_point() +\n  geom_label(aes(label = if_else(k == 3, \"Elbow\", NA_character_)),\n    nudge_y = -25, fill = pal[1]\n  ) +\n  labs(\n    title = \"Elbow Method\",\n    x = \"Clusters\", y = \"Within-Cluster Variance\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/elbow-1.png){width=100%}\n:::\n:::\n\n\nAnd settling on this choice of 3 clusters, we get this split.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nassignments |>\n  filter(k == 3) |>\n  ggplot(aes(.fittedPC1, .fittedPC2, fill = .cluster)) +\n  geom_label(aes(label = area_name), \n             size = 2, hjust = \"inward\", overlap = FALSE) +\n  scale_fill_manual(values = pal[c(1, 2, 4)]) +\n  labs(\n    title = \"Closely-Related London Areas\", fill = \"Cluster\",\n    x = \"Principal Component 1\", y = \"Principal Component 2\",\n    caption = \"Source: data.london.gov.uk\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/final clusters-1.png){width=100%}\n:::\n:::\n\n\n## Using Tidymodels\n\nAn alternative approach is to use the new [tidyclust](https://github.com/EmilHvitfeldt/tidyclust)[@tidyclust] package which augments the tidymodels framework with a tidy unified interface to clustering models.\n\nFirst we tune the model with 1 to 6 clusters and review how well they capture the natural groupings.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkmeans_spec <- k_means(num_clusters = tune()) |> \n  set_engine(\"stats\", algorithm = \"Hartigan-Wong\")\n\nkmeans_rec <- raw_df |> \n  select(where(is.numeric)) |> \n  recipe(~ .) |> \n  step_zv(all_predictors()) |> \n  step_normalize(all_predictors()) |> \n  step_pca(all_predictors(), threshold = 0.9)\n\nkmeans_wflow <- workflow() |>\n  add_model(kmeans_spec) |>\n  add_recipe(kmeans_rec)\n\nkmeans_cv <- vfold_cv(pca_augmented, v = 5)\n\nkmeans_res <- tune_cluster(\n  kmeans_wflow,\n  resamples = kmeans_cv,\n  grid = crossing(\n    num_clusters = seq(1, 6, 1)\n  ),\n  control = control_grid(save_pred = TRUE),\n  metrics = cluster_metric_set(sse_total, sse_ratio)\n)\n\nkmeans_metrics <- kmeans_res |> collect_metrics()\n\nkmeans_metrics |>\n  filter(.metric == \"sse_ratio\") |>\n  ggplot(aes(num_clusters, mean)) +\n  geom_point() +\n  geom_line() +\n  geom_label(aes(label = if_else(num_clusters == 3, \"Elbow\", NA_character_)),\n             nudge_y = -0.1, fill = pal[1]) +\n  labs(title = \"Elbow Method\", x = \"Clusters\", y = \"WSS\") +\n  scale_x_continuous(breaks = 1:6)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/tidyclust tune-1.png){width=100%}\n:::\n:::\n\n\nAgain we can visualise the 3 clusters suggested by the elbow method.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkmeans_spec <- k_means(num_clusters = 3) |> \n  set_engine(\"stats\", algorithm = \"Hartigan-Wong\")\n\nkmeans_wflow <- kmeans_wflow |> \n  update_model(kmeans_spec)\n\nkmeans_fit <- kmeans_wflow |> \n  fit(pca_augmented) \n\nkmeans_clust <- kmeans_fit |> \n  extract_centroids() |> \n  rename_with(~ str_c(\".fitted\", .), starts_with(\"PC\"))\n\nkmeans_aug <- kmeans_fit |> \n  augment(pca_augmented)\n\nkmeans_aug |>\n  mutate(.pred_cluster = str_remove(.pred_cluster, \"Cluster_\")) |> \n  ggplot(aes(.fittedPC1, .fittedPC2)) +\n  geom_label(aes(label = area_name, colour = .pred_cluster),\n             size = 2, hjust = \"inward\") +\n  scale_colour_manual(values = pal[c(1:3, 5)]) +\n  geom_point(data = kmeans_clust, size = 4, shape = 13) +\n  labs(\n    title = \"Closely-Related London Areas\", fill = \"Cluster\",\n    subtitle = \"X Marks the Cluster Centre\",\n    x = \"Principal Component 1\", y = \"Principal Component 2\",\n    colour = \"Cluster\",\n    caption = \"Source: data.london.gov.uk\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/tidyclust fit-1.png){width=100%}\n:::\n:::\n\n\nHow does this look with [geospatial data](https://data.london.gov.uk/dataset/statistical-gis-boundary-files-london)? And how do the clusters relate to inner and outer London?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshape_df <-\n  st_read(\"statistical-gis-boundaries-london/ESRI\",\n    \"London_Borough_Excluding_MHW\",\n    as_tibble = TRUE, quiet = TRUE\n  ) |>\n  left_join(assignments |> \n              filter(k == 3), by = join_by(GSS_CODE == code)) |>\n  select(.cluster, inner_outer_london, NAME, geometry) |>\n  pivot_longer(c(.cluster, inner_outer_london)) |>\n  mutate(value = recode(value, \"1\" = \"Cluster 1\", \n                        \"2\" = \"Cluster 2\", \"3\" = \"Cluster 3\"))\n\nshape_df |>\n  mutate(name = recode(name,\n    \".cluster\" = \"By Cluster\",\n    \"inner_outer_london\" = \"By Inner/Outer\"\n  )) |>\n  ggplot() +\n  geom_sf(aes(fill = value), colour = \"white\") +\n  geom_sf_label(aes(label = NAME), size = 2, alpha = 0.7) +\n  scale_fill_manual(values = pal[c(3, 4, 1, 2, 5)]) +\n  facet_wrap(~name) +\n  theme_void() +\n  theme(legend.position = \"none\") +\n  labs(fill = NULL)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/geospatial-1.png){width=100%}\n:::\n:::\n\n\nNot too dissimilar, but with some notable differences.\n\nThe City of London is a cluster apart in the heart of London. Kensington and Chelsea is an inner-London borough, but exhibits outer-London characteristics. And the reverse is true of the likes of Brent and Greenwich.\n\nDimensionality reduction is further explored in [East-West Drift](/project/un) coupled with animation.\n\n## R Toolbox\n\nSummarising below the packages and functions used in this post enables me to separately create a [toolbox visualisation](/project/box) summarising the usage of packages and functions across all posts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nused_here()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"usedthese table table-striped\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Package </th>\n   <th style=\"text-align:left;\"> Function </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> base </td>\n   <td style=\"text-align:left;\"> c[10], factor[1], is.na[1], library[13], seq[1], set.seed[1], sum[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> conflicted </td>\n   <td style=\"text-align:left;\"> conflict_prefer_all[1], conflict_scout[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> dplyr </td>\n   <td style=\"text-align:left;\"> across[1], arrange[1], cur_data[1], desc[1], filter[5], if_else[3], join_by[1], left_join[1], mutate[8], na_if[1], recode[2], rename[1], rename_with[2], rowwise[1], select[6], starts_with[1], where[3] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> generics </td>\n   <td style=\"text-align:left;\"> augment[2], fit[1], tidy[2] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ggfoundry </td>\n   <td style=\"text-align:left;\"> display_palette[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ggplot2 </td>\n   <td style=\"text-align:left;\"> aes[19], arrow[1], element_blank[1], facet_wrap[3], geom_col[1], geom_label[5], geom_line[2], geom_point[6], geom_segment[1], geom_sf[1], geom_sf_label[1], ggplot[10], labs[10], scale_colour_manual[3], scale_fill_manual[4], scale_x_continuous[2], scale_y_discrete[1], theme[2], theme_bw[1], theme_minimal[1], theme_set[1], theme_void[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ggrepel </td>\n   <td style=\"text-align:left;\"> geom_text_repel[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> glue </td>\n   <td style=\"text-align:left;\"> glue[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> grid </td>\n   <td style=\"text-align:left;\"> unit[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> hardhat </td>\n   <td style=\"text-align:left;\"> tune[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> janitor </td>\n   <td style=\"text-align:left;\"> clean_names[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> parsnip </td>\n   <td style=\"text-align:left;\"> set_engine[2] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> purrr </td>\n   <td style=\"text-align:left;\"> map[4], pluck[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> readxl </td>\n   <td style=\"text-align:left;\"> read_xlsx[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> recipes </td>\n   <td style=\"text-align:left;\"> all_predictors[3], recipe[1], step_normalize[1], step_pca[1], step_zv[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> rsample </td>\n   <td style=\"text-align:left;\"> vfold_cv[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> scales </td>\n   <td style=\"text-align:left;\"> label_percent[1], number[1], percent[2] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> sf </td>\n   <td style=\"text-align:left;\"> st_read[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> stats </td>\n   <td style=\"text-align:left;\"> kmeans[1], prcomp[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> stringr </td>\n   <td style=\"text-align:left;\"> str_c[2], str_remove[3], str_remove_all[1], str_starts[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> tibble </td>\n   <td style=\"text-align:left;\"> tibble[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> tidyclust </td>\n   <td style=\"text-align:left;\"> cluster_metric_set[1], extract_centroids[1], k_means[2], tune_cluster[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> tidyr </td>\n   <td style=\"text-align:left;\"> crossing[1], pivot_longer[2], pivot_wider[1], population[1], unnest[3] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> tidyselect </td>\n   <td style=\"text-align:left;\"> matches[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> tidytext </td>\n   <td style=\"text-align:left;\"> reorder_within[1], scale_y_reordered[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> tune </td>\n   <td style=\"text-align:left;\"> collect_metrics[1], control_grid[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> usedthese </td>\n   <td style=\"text-align:left;\"> used_here[1] </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> workflows </td>\n   <td style=\"text-align:left;\"> add_model[1], add_recipe[1], update_model[1], workflow[1] </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}